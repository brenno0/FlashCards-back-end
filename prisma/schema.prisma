generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  decks         Deck[]
  studySessions StudySession[]
  progress      FlashcardProgress[]
  Tag           Tag[]
}

model Deck {
  id          String   @id @default(uuid())
  title       String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  flashcards    Flashcard[]
  studySessions StudySession[]
  tags          DeckTag[]
}

model Flashcard {
  id        String   @id @default(uuid())
  front     String
  back      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deck   Deck   @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId String

  progress FlashcardProgress[]
  tags     FlashcardTag[]
}

model StudySession {
  id         String    @id @default(uuid())
  startedAt  DateTime  @default(now())
  finishedAt DateTime?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  deck   Deck   @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId String
}

model FlashcardProgress {
  id            String         @id @default(uuid())
  status        ProgressStatus @default(NEW) // Novo campo, muito Ãºtil!
  nextReviewAt  DateTime       @default(now()) // Corresponde ao 'nextReview'
  interval      Int            @default(0)
  repetitions   Int            @default(0)
  easeFactor    Float          @default(2.5)
  lastStudiedAt DateTime? // Corresponde ao 'lastReviewed'

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  flashcard   Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
  flashcardId String

  @@unique([userId, flashcardId])
}

model Tag {
  id     String @id @default(uuid())
  name   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  flashcards FlashcardTag[]
  decks      DeckTag[]
}

model FlashcardTag {
  flashcard   Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
  flashcardId String

  tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId String

  @@id([flashcardId, tagId])
}

model DeckTag {
  deck   Deck   @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId String

  tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId String

  @@id([deckId, tagId])
}

enum ProgressStatus {
  NEW
  LEARNED
  REVIEW
  AGAIN
}
